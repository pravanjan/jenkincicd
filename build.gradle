apply plugin: 'war'
apply plugin: 'jacoco'
apply plugin: "com.moowork.node"

apply plugin: "com.google.cloud.tools.appengine-standard"
import org.gradle.api.tasks.Exec

testClasses {
    doLast{
        	CopyXmlfile.execute()
        	enhanceJava8.execute()

    }
}

task  CopyXmlfile (type: Copy)

CopyXmlfile {
    from 'src/main/webapp/WEB-INF/classes'
    into 'build/classes/java/test'
    include('**/*.xml')
}


buildscript {
    repositories {
        mavenCentral()
        maven{
        url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {

 		classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath 'com.google.cloud.tools:endpoints-framework-gradle-plugin:+'
        classpath 'gradle.plugin.com.craigburke.gradle:bower-installer-gradle:2.5.1'

    }
}


repositories {
	maven {
		url 'https://maven-central.storage.googleapis.com'

	}
	jcenter()
  	mavenCentral()
}

configurations {
		providedCompile
}


 task webpack(type: Exec) {
    inputs.file("$projectDir/webpack.config.js")
    commandLine "$projectDir/node_modules/.bin/webpack"
}



dependencies {
    compile 'com.google.appengine:appengine:+'
    providedCompile group : 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
    compile 'org.springframework:spring-webmvc:4.0.2.RELEASE'

	compile 'org.ow2.asm:asm:5.0'

	compile "com.google.appengine:appengine-api-1.0-sdk:+"

    compile 'org.datanucleus:datanucleus-api-jdo:3.1.3'
    compile group: 'org.datanucleus', name: 'datanucleus-core', version: '3.1.3'
    compile group: 'org.datanucleus', name: 'javax.jdo', version: '3.2.0-m7'
    compile group: 'javax.jdo', name: 'jdo-api', version: '3.0.1'


    compile 'com.google.appengine.orm:datanucleus-appengine:2.1.2'
    compile 'org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.0'
    compile 'javax.jdo:jdo-api:3.0.1'
    compile 'javax.transaction:jta:1.1'
    compile group: 'com.google.appengine', name: 'appengine-api-labs', version: '+'

    compile group: 'log4j', name: 'log4j', version: '+'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '+'

    compile group: 'commons-logging', name: 'commons-logging', version: '+'
    compile group: 'commons-codec', name: 'commons-codec', version: '+'
    compile group: 'com.google.code.gson', name: 'gson', version: '+'
    compile group: 'commons-lang', name: 'commons-lang', version: '+'

    compile group: 'com.google.guava', name: 'guava', version: '+'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '+'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '+'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4-beta1'
    compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.5'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '+'

    // Unit testing dependency

    compile group: 'junit', name: 'junit', version: '+'
    compile group: 'org.mockito', name: 'mockito-core', version: '+'
	compile group: 'org.powermock', name: 'powermock-api-mockito2', version: '+'
    compile group: 'org.powermock', name: 'powermock-module-junit4', version: '+'

    compile group: 'org.springframework', name: 'spring-test', version: '4.0.2.RELEASE'

    providedCompile "com.google.appengine:appengine-api-stubs:+"
    providedCompile "com.google.appengine:appengine-testing:+"



    compile fileTree(dir: 'libs', include: '**.jar');

   }





   jacoco{
      toolVersion ='0.7.5.201505241946'
   }
   jacocoTestReport {
      reports {
      html.enabled =true
      }
      afterEvaluate {
       classDirectories = files(classDirectories.files.collect{
        fileTree(dir: it, exclude : ['v0/com/ninja/jdo/**'])
       })
      }
   }


test {
  testLogging.showStandardStreams = true
  jvmArgs "-XX:MaxPermSize=256m"
}


 task enhanceJava8 {
	description "Enhance JDO model classes using DataNucleus enhanceJava8"
	dependsOn compileJava
	doLast {
        // define the entity classes
        def entityFiles = fileTree(sourceSets.main.output.classesDir).matching {
            include '**/*.class'
        }


 		println "Enhancing with DataNucleus the following files"

        // define Ant task for DataNucleus Enhancer
        ant.taskdef(
            name : 'enhanceJava8',
            classpath : sourceSets.main.runtimeClasspath.asPath,
            classname : 'org.datanucleus.enhancer.tools.EnhancerTask'
            // the below is for DataNucleus Enhancer 3.1.1
            //classname : 'org.datanucleus.enhancer.tools.EnhancerTask'
        )

        // run the DataNucleus Enhancer as an Ant task
        ant.enhanceJava8(
            classpath: sourceSets.main.runtimeClasspath.asPath,
            failonerror : true,
            verbose: true,
            api: "JDO") {
            entityFiles.addToAntBuilder(ant, 'fileset', FileCollection.AntType.FileSet)
        }
    }
 }

classes.dependsOn enhanceJava8


appengine {  // App Engine tasks configuration
  run {      // local (dev_appserver) configuration (standard environments only)
    port = 9090              // default
    jvmFlags = ['-Ddatastore.backing_store=../../src/main/webapp/WEB-INF/appengine-generated/local_db.bin', '-Dappengine.fullscan.seconds=5']

  }
	stage {
 	  enableJarClasses = true
	}
  deploy {   // deploy configuration
    stopPreviousVersion = false  // default - stop the current version
    promote = false              // default - & make this the current version
    version = 'pr'
	project = 'fullintegration-testing'
  }
}


defaultTasks 'bower'

// Get the path for the locally installed binaries
task npmBin{
 doLast{
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'npm'
            args = ['bin']
            standardOutput = os
        }
        ext.binPath = os.toString().trim() + "/"
    }
    }
}


// Install development packages from package.json
task node_setup(type: Exec) {
   
    description = "Grab NodeJS dependencies (from package.json)"
    commandLine = ["npm", "install"]
    inputs.file "package.json"
    outputs.dir "node_modules"
    tasks.npmBin.execute()

}

